// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  lecturer
  admin
}

enum EnrollmentStatus {
  pending
  approved
  rejected
}

enum NotificationType {
  grade
  enrollment
  assignment
  general
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  coursesTaught    Course[]
  enrollments      Enrollment[]
  submissions      Submission[]
  notifications    Notification[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  code        String   @unique
  credits     Int
  lecturerId  String
  syllabusUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lecturer    User         @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  assignments Assignment[]

  @@map("courses")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String
  maxPoints   Int
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("assignments")
}

model Enrollment {
  id         String           @id @default(cuid())
  studentId  String
  courseId   String
  status     EnrollmentStatus @default(pending)
  enrolledAt DateTime         @default(now())
  approvedAt DateTime?

  // Relations
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  content      String
  fileUrl      String?
  grade        Int?
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
